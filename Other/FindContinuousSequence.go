package other

/**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 * JZ74 和为S的连续正数序列
 * 滑动窗口
 * 描述
小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列
数据范围：0<n≤100
进阶：时间复杂度 O(n)
返回值描述：
输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序
示例1
输入：9
返回值：[[2,3,4],[4,5]]
示例2
输入：0
返回值：[]
 * @param sum int整型
 * @return int整型二维数组
*/
func FindContinuousSequence(sum int) [][]int {
	res := [][]int{}
	// 从1到2的区间开始
	l := 1
	r := 2
	for l < r {
		// 区间内和的连续和
		wsum := (l + r) * (r - l + 1) / 2
		if wsum == sum {
			tmp := []int{}
			// 记录区间序列
			for i := l; i <= r; i++ {
				tmp = append(tmp, i)
			}
			res = append(res, tmp)
			// 左区间向右
			l++
		} else if wsum < sum {
			// 区间内的序列和小于目标数 右区间扩展
			r++
		} else {
			// 区间内的序列和大于目标数 左区间扩展
			l++
		}
	}
	return res
}
